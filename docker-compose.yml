version: '3.3'
volumes:
  db_storage:
networks:
  proxy:
    external: true
    
services:
  app:
    container_name: app
    build:
      dockerfile: app.Dockerfile
      context: app
    restart: always
    networks:
      - proxy
    cap_add:
      - ALL
    ports:
      - 3000:3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 60s
      timeout: 10s
      retries: 3
    tty: true
    stdin_open: true

  api:
    container_name: api
    build:
      dockerfile: api.Dockerfile
      context: api
    restart: always
    networks:
      - proxy
    cap_add:
      - ALL
    ports:
      - 3009:3009
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3009"]
      interval: 60s
      timeout: 10s
      retries: 3
    tty: true
    stdin_open: true

  ngrok:
      image: ngrok/ngrok:3
      restart: unless-stopped
      command: 'http 3000'        
      environment:
        - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
      ports:
        - 4040:4040
      expose:
        - '4040'
      network_mode: 'host'

  postgres:
    image: postgres:16
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_NON_ROOT_USER=${POSTGRES_NON_ROOT_USER}
      - POSTGRES_NON_ROOT_PASSWORD=${POSTGRES_NON_ROOT_PASSWORD}
    volumes:
      - db_storage:/var/lib/postgresql/data
      - ./init-data.sh:/docker-entrypoint-initdb.d/init-data.sh
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - proxy
    ports:
      - 5432:5432
